{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/ListCategories.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","event","preventDefault","trim","length","categories","id","icon","faSearch","type","onChange","target","placeholder","cleanGifTitle","gifs","map","gif","title","replace","getGifs","category","a","url","encodeURI","fetch","resp","json","data","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","ListCategories","defaultProps","GifExpertApp","defaultCategories","ReactDOM","render","document","getElementById"],"mappings":"2PA2CeA,EApCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACbC,mBAAS,IADI,mBAChCC,EADgC,KACzBC,EADyB,KAevC,OACE,0BAAMC,SAVa,SAAAC,GACnBA,EAAMC,iBAEHJ,EAAMK,OAAOC,OAAS,IACvBR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAeO,OACvCN,EAAS,OAMT,6BAASO,GAAG,UACV,+BACE,kBAAC,IAAD,CAAiBC,KAAMC,OAEzB,2BACEC,KAAK,OACLX,MAAOA,EACPY,SAtBU,SAAAT,GAChBF,EAASE,EAAMU,OAAOb,QAsBhBc,YAAY,sB,+BC5BhBC,EAAgB,SAAAC,GACpB,OAAOA,EAAKC,KAAI,SAAAC,GAAG,kCACdA,GADc,IAEjBC,MAAOD,EAAIC,MAAMC,QAAQ,QAAS,UAmBvBC,EAfF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACRC,EADQ,UAXH,gCAWG,qBACkBC,UAAUH,GAD5B,kBATF,GASE,oBAVA,oCAUA,SAEKI,MAAMF,GAFX,cAERG,EAFQ,gBAGSA,EAAKC,OAHd,uBAGNC,EAHM,EAGNA,KACFb,EAAOa,EAAKZ,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLV,GAAIU,EAAIV,GACRW,MAAOD,EAAIC,MACXK,IAAG,UAAEN,EAAIY,cAAN,aAAE,EAAYC,iBAAiBP,QARxB,kBAYPT,EAAcC,IAZP,4CAAH,sDCMEgB,EAdK,SAAC,GAAkB,IAAjBR,EAAgB,EAAhBA,IAAKL,EAAW,EAAXA,MACzB,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKV,EAAKW,IAAKhB,IACpB,2BAAIA,KCsBKiB,EAvBC,SAAC,GAAgB,IAAfd,EAAc,EAAdA,SAAc,ECFJ,SAAAA,GAAa,IAAD,EACZvB,mBAAS,CACjC8B,KAAM,GACNQ,SAAS,IAH2B,mBAC/BC,EAD+B,KACxBC,EADwB,KActC,OARAC,qBAAU,WACRnB,EAAQC,GACLmB,MAAK,SAAAzB,GAAI,OAAIuB,EAAS,CACrBV,KAAMb,EACNqB,SAAS,SAEb,CAACf,IAEIgB,EDXuBI,CAAapB,GAA9BN,EADiB,EACvBa,KAAYQ,EADW,EACXA,QAEnB,OACE,yBAAKJ,UAAU,aACb,wBAAIA,UAAU,qCAAqCX,GACjDe,GAAW,uBAAGJ,UAAU,4CAAb,WAEXjB,EAAKC,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACEyB,IAAKzB,EAAIV,IACLU,SEZV0B,EAAiB,SAAC,GAAkB,IAAjBrC,EAAgB,EAAhBA,WACvB,OACE,oCACIA,GAAoC,IAAtBA,EAAWD,OACvBC,EAAWU,KAAI,SAAAK,GAAQ,OACrB,kBAAC,EAAD,CACEqB,IAAKrB,EACLA,SAAUA,OAIhB,qEAURsB,EAAeC,aAAe,CAC5BtC,WAAY,IAGCqC,QCvBTE,EAAe,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAAwB,EACVhD,mBAASgD,GADC,mBACvCxC,EADuC,KAC3BT,EAD2B,KAG9C,OACE,oCACE,4CACA,kBAAC,EAAD,CACEA,cAAeA,IAEjB,6BACA,kBAAC,EAAD,CAAgBS,WAAYA,MAKlCuC,EAAaD,aAAe,CAC1BE,kBAAmB,IAGND,Q,MCnBfE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3f8602de.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n// get our fontawesome imports\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst AddCategory = ({setCategories}) => {\n  const [value, setValue] = useState('');\n  const handleAdd = event => {\n    setValue(event.target.value);\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if(value.trim().length > 0) {\n      setCategories(categories => [value, ...categories]);\n      setValue('');\n    }\n  }\n\n  return(\n    <form onSubmit={handleSubmit}>\n      <section id=\"search\">\n        <label>\n          <FontAwesomeIcon icon={faSearch} />\n        </label>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={handleAdd}\n          placeholder='Search here...'\n        />\n      </section>\n    </form>\n  );\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n\n","const base = 'https://api.giphy.com/v1/gifs';\nconst api_key = 'puAUaxA9dbDZKmVE07fozbaeKx6D9oT7';\nconst limit = 15;\n\nconst cleanGifTitle = gifs => {\n  return gifs.map(gif => ({\n    ...gif,\n    title: gif.title.replace(/ GIF/g, '')\n  }));\n}\n\nconst getGifs = async category => {\n  const url = `${base}/search?q=${encodeURI(category)}&limit=${limit}&api_key=${api_key}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map(gif => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images?.downsized_medium.url\n    }\n  });\n\n  return cleanGifTitle(gifs);\n}\n\nexport default getGifs;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifGridItem = ({url, title}) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n}\n\nGifGridItem.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n}\n\nexport default GifGridItem;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useFetchGifs } from '../hooks';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n  const {data: gifs, loading} = useFetchGifs(category);\n\n  return(\n    <div className=\"card-grid\">\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      { loading && <p className=\"loading animate__animated animate__flash\">Loading</p> }\n      {\n        gifs.map(gif => (\n          <GifGridItem\n            key={gif.id}\n            {...gif}\n          />)\n        )\n      }\n    </div>\n  );\n}\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired\n}\n\nexport default GifGrid;\n\n","import { useState, useEffect } from 'react';\n\nimport { getGifs } from '../helpers';\n\nexport const useFetchGifs = category => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then(gifs => setState({\n        data: gifs,\n        loading: false\n      }))\n  },[category]);\n\n  return state; // { data: [], loading: true }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GifGrid from './GifGrid';\n\nconst ListCategories = ({categories}) => {\n  return(\n    <>\n      { categories && categories.length !== 0 ?\n          categories.map(category => (\n            <GifGrid\n              key={category}\n              category={category}\n            />\n          ))\n        :\n        <h3>There are no categories to display.</h3>\n      }\n    </>\n  );\n}\n\nListCategories.propTypes = {\n  categories: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nListCategories.defaultProps = {\n  categories: []\n}\n\nexport default ListCategories;\n\n","import React, {useState} from 'react';\n\nimport {\n  AddCategory,\n  ListCategories\n} from './components';\n\nconst GifExpertApp = ({ defaultCategories }) => {\n  const [categories, setCategories] = useState(defaultCategories);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory\n        setCategories={setCategories}\n      />\n      <hr />\n      <ListCategories categories={categories} />\n    </>\n  );\n}\n\nGifExpertApp.defaultProps = {\n  defaultCategories: []\n}\n\nexport default GifExpertApp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}